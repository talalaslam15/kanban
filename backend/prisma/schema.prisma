// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(uuid())
  name      String
  email     String        @unique
  password  String
  role      Role          @default(member) 
  boards    Board[]       @relation("BoardOwner")
  memberships BoardMember[]
  tasks     Task[]        @relation("AssigneeTasks")
  comments  Comment[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Board {
  id          String        @id @default(uuid())
  title       String
  description String?
  owner       User          @relation("BoardOwner", fields: [ownerId], references: [id])
  ownerId     String
  members     BoardMember[]
  columns     Column[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model BoardMember {
  id        String   @id @default(uuid())
  board     Board    @relation(fields: [boardId], references: [id])
  boardId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      Role
  createdAt DateTime @default(now())

  @@unique([boardId, userId]) // one user per board
}

model Column {
  id        String   @id @default(uuid())
  title     String
  position  Int
  board     Board    @relation(fields: [boardId], references: [id])
  boardId   String
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  position    Int
  column      Column    @relation(fields: [columnId], references: [id])
  columnId    String
  assignee    User?     @relation("AssigneeTasks", fields: [assigneeId], references: [id])
  assigneeId  String?
  dueDate     DateTime?
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

enum Role {
  admin
  member
  viewer
}
